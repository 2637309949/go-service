// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/handler.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	registry "go-micro.dev/v5/registry"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ registry.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Handler service

func NewHandlerEndpoints() []*registry.Endpoint {
	return []*registry.Endpoint{}
}

// Client API for Handler service

type HandlerService interface {
	Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type handlerService struct {
	c    client.Client
	name string
}

func NewHandlerService(name string, c client.Client) HandlerService {
	return &handlerService{
		c:    c,
		name: name,
	}
}

func (c *handlerService) Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Handler.Hello", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Handler service

type HandlerHandler interface {
	Hello(context.Context, *Request, *Response) error
}

func RegisterEndpointHandler(s server.Server, hdlr HandlerHandler, opts ...server.HandlerOption) error {
	type handler interface {
		Hello(ctx context.Context, in *Request, out *Response) error
	}
	type Endpoint struct {
		handler
	}
	h := &handlerHandler{hdlr}
	return s.Handle(s.NewHandler(&Endpoint{h}, opts...))
}

type handlerHandler struct {
	HandlerHandler
}

func (h *handlerHandler) Hello(ctx context.Context, in *Request, out *Response) error {
	return h.HandlerHandler.Hello(ctx, in, out)
}
